* cl-bitfields: Macros for working with bitfields in Common Lisp

  It's common when working with tools such as assemblers and hardware
  to need to manage data stored as bitfields within a fixed-width
  word. Machine code opcodes, for example, are often described in this
  way, as some bits defining the operation, some others the addressing
  mode or literal data, and so forth.

  This library provides four macros that attempt to provide bitfield
  operations in a Lisp-like fashion:

  - ~with-bitfields~ :: A destructuring bind of a bitfield pattern
    into new variables that are in scope for the body forms
  - ~make-bitfields~ :: The opposite operation, constructing a
    bitfield value from a pattern using variables already existing
  - ~setf-bitfields~ :: Set a place from a bitfield pattern
  - ~with-bitfields-f~ :: Roughly like ~with-bitfields~ followed by
    ~setf-bitfields~ that writes any changes made to the variables in
    the pattern back into the value that was destructured.


  It also defines one condition:

  - ~information-lost~ :: Signalled when non-zero bits in a variable
    are not elaborated within a pattern.

** ~with-bitfields~: Destructuring bind of bitfields

*** Static fields

    The simplest form of destructuring bitfields is:

    #+begin_src lisp
(with-bitfields (1 1 0 x x x y y) opcode
  (princ x))
    #+end_src

    The pattern ~(1 1 0 x x x y y)~ denotes a bitfield, most
    significant bit on the left. The three most significant bits of
    the pattern are fixed as #2r110; the next three bits are
    identified by a variable ~x~; and the two least significant bits
    are identified by ~y~. This pattern is matched against the
    expression ~opcode~, and the variables ~x~ and ~y~ are then in
    scope for the body forms. The value of the construct is the value
    of the last body form.

    If the corresponding bits of ~opcode~ do not match the fixed bits
    of the pattern (#2r110) then the destructuring fails and the value
    of the construct is ~nil~.

*** Non-consecutive bitfields

    The same variable can appear non-consecutively, for example:

    #+begin_src lisp
(with-bitfields (1 1 0 x x y y x) opcode
  (princ x))
    #+end_src

    The value of ~x~ is taken from the bits in the corresponding
    positions. The above pattern, when matched against #2r11011101,
    would assign #2r111 to ~x~.

*** Don't-care bits

    As well as 1 and 0, the character - in a pattern matches /any/
    single bit: a "don't care" that won't stop a pattern from
    matching. The pattern ~(- 1 0 x x x y y)~ would match #2r01011100
    or #2r11011100, for example: the value of the first bit is a
    don't-care.

    Don't care bits can /only/ appear in ~with-bitfields~ patterns,
    and /not/ in those of the other macros.

*** Width specifiers

    Having the repeated occurrences of ~x~ and ~y~ are often useful
    because they make the destructuring of the bitfield obvious. They
    can however be hard to read in some cases, so patterns with
    several consecutive bits being bound can also be phrased in terms
    of /width specifiers/:

    #+begin_src lisp
(with-bitfields (1 1 0 (x 3) (y 2)) opcode
  (princ x))
    #+end_src

    This is the same pattern as the first. The two forms can be freely
    mixed:

    #+begin_src lisp
(with-bitfields (1 1 0 (x 3) y y) opcode
  (princ x))
    #+end_src

*** Variable-width fields

    In the above scenarios the number of bits being destructured, and
    their mapping to variables, is known at compile-time. Sometimes
    it's not possible to do this: the widths of fields may only be
    known at run-time. Width specifiers can therefore include
    /computed/ widths determined at run-time:

    #+begin_src lisp
(let ((v 3))
  (with-bitfields (1 1 0 (x v) y y) opcode
    (princ x)))
    #+end_src

    This pattern is the same as the ones above: ~x~ is in this case
    three bits wide, but this is only determined at run-time and could
    be changed by changing ~v~.

    The computed widths can be arbitrary forms:

    #+begin_src lisp
(let ((v 2))
  (with-bitfields (1 1 0 (x (1+ v) (y v) opcode
    (princ x)))
    #+end_src

    These forms are computed once left-to-right, respecting any
    side-effects.

** ~make-bitfields~: Create values from bitfields

   ~make-bitfields~ uses the same style as ~with-bitfields~ to create
   a value from bits taken from variables in scope. The patterns
   available are the same as those used by ~with-bitfields~, with the
   single difference that - (don't care) bits can't appear.

   The form:

   #+begin_src lisp
(let ((x #2r10110)
      (y #2r10))
  (make-bitfields (x x y y x x x 1)))
   #+end_src

   will return the value #2r10101101: the three highest-order bits of
   ~x~, followed by the two highest-order bits from ~y~, followed by the
   lowest-order bit of ~x~, followed by 1.

** ~setf-bitfields~: Set a place with bitfields

   Stores the value constructed from a bitfields pattern to a place.
   Assuming ~v~ designates somewhere ~setf~-able, the form:

   #+begin_src lisp
(let ((x #2r110)
      (y #2r11))
  (setf-bitfields v (x x x y y)))
   #+end_src

   will update ~v~ with the value #2r11011. ~setf~-able places include
   variables, elements of lists and sequences (using ~elt~), and the
   slots of CLOS objects (including those identified with the
   ~with-slots~ and ~with-accessors~ macros). As with
   ~make-bitfields~, don't-care bits are not accepted in the pattern.

** ~with-bitfields-f~: Destructure and update bitfields

   ~with-bitfields-f~ acts rather like a combination of a
   destructuring bind using ~with-bitfields~ followed by an update
   in-place of the value that was destructured in the form of
   ~setf-bitfields~. Changes made to the variables captured in the
   destructuring pattern are applied back to the value from which they
   were destructured. For example:

   #+begin_src lisp
(let ((v #2r1011101))
  (with-bitfields-f (x x x 1 1 y y) v
    (setf x #2r000)
    (setf y #2r00))
  v)
   #+end_src

   will return #2r0001100: The value of ~v~ will be reconstructed from
   the updated values of ~x~ and ~y~ according to the pattern by which
   they were originally destructured. Don't-care bits are not accepted
   in the pattern.

** ~information-lost~: Non-zero bits have been dropped when building bitfields

   Consider the following pattern:

   #+begin_src lisp
(let ((v #2r10110))
  (with-bitfields-f (x x y y y) v
    (setf x #2r111))
  v)
   #+end_src

   This will set ~v~ to #2r11110, taking two low-bits from ~x~
   according to the pattern by which is was destructured. But ~x~
   includes another, high-order bit that isn't consumed when
   reconstructing the pattern: information is potentially lost. This
   can be a perfectly benign situation, but it can also indicate a
   run-time problem. (A common example is that ~x~ represents a
   fixed-width register and an arithmetic operation has accidentally
   generated a carry out of its high-order bit.)

   In these cases the ~information-lost~ condition is signalled. This
   contains a list of variables that have non-zero bits that have not
   been used in constructing a bitfield using a pattern. This allows
   information loss to be reported, or to stop computation in order to
   fix a problem.

   The names of the variables that have lost information are available
   through the ~information-lost-from~ function on the condition. The
   variables appear in the same order as they appear in the pattern.

   The ~information-lost-warning~ function provides a standard warning
   handler for reporting information loss. For example:

   #+begin_src lisp
(handler-bind ((information-lost #'information-lost-warning))
  (let ((x #2r111))
    (make-bitfields (x x))))
   #+end_src

** Side effects and failed matches

   All width specification calculations are done before any pattern
   matching.

   This detail is irrelevant *unless* the width specifier calculations
   include side effects, in which case all those side effects will
   happen even if the pattern fails to match (and therefore returns
   ~nil~).

   This is intended behaviour: the alternative is to expand widths
   only as they are matched, but this makes the mental model of what
   side effects will and won't occur quite problematic. The easiest
   way to avoid any possible issue is to avoid side-effecting width
   specifiers. I can't imagine a case in which this wouldn't be
   possible.

** Author

   Simon Dobson <mailto:simoninireland@gmail.com>.
